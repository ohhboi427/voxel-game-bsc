#version 460 core

layout(binding = 0, std140) uniform ProjectionProperties
{
	mat4 View;
	mat4 ViewInv;
	mat4 Proj;
	mat4 ProjInv;
} u_projectionProperties;

layout(binding = 1, std140) uniform ScreenProperties
{
	uvec2 Size;
} u_screenProperties;

layout(binding = 0, rgba16f) uniform image2D u_renderedImage;

// xy -> coordiante, z -> offset, w -> LOD
layout(location = 0) uniform ivec4 u_drawData = ivec4(0, 0, 0, 0);

#include "Octree.glsl"
#include "Shading.glsl"
#include "RayHitInfo.glsl"

// x -> Distance to the nearest intersection.
// y -> Distance to the furthest intersection.
vec2 RayBoxIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax)
{
	vec3 rayDirectionInverse = vec3(1.0) / rayDirection;

	vec2 tx = (vec2(boundsMin.x, boundsMax.x) - vec2(rayOrigin.x)) * rayDirectionInverse.x;
	vec2 ty = (vec2(boundsMin.y, boundsMax.y) - vec2(rayOrigin.y)) * rayDirectionInverse.y;
	vec2 tz = (vec2(boundsMin.z, boundsMax.z) - vec2(rayOrigin.z)) * rayDirectionInverse.z;

	float tmin = max(max(min(tx.x, tx.y), min(ty.x, ty.y)), min(tz.x, tz.y));
	float tmax = min(min(max(tx.x, tx.y), max(ty.x, ty.y)), max(tz.x, tz.y));

	// Box behind
	if(tmax < 0.0)
	{
		return vec2(-1.0);
	}

	// Doesnt't intersect
	if(tmin > tmax)
	{
		return vec2(-1.0);
	}

	// Ray inside box
	if(tmin < 0.0)
	{
		return vec2(0.0, tmax);
	}

	return vec2(tmin, tmax);
}

bool RayOctreeTraversal(vec3 rayOrigin, vec3 rayDirection, float maxDistance, out RayHitInfo hitInfo)
{
	vec3 rayOriginInChunk = rayOrigin - vec3(u_drawData.x, 0, u_drawData.y) * CHUNK_SIZE;

	// Move the ray origin to the edge of the chunk
	vec2 boxIntersectTest = RayBoxIntersection(rayOriginInChunk, rayDirection, vec3(0.0), vec3(CHUNK_SIZE));
	if(boxIntersectTest.x < 0.0 || boxIntersectTest.x > maxDistance)
	{
		return false;
	}
	rayOriginInChunk += boxIntersectTest.x * rayDirection;

	vec3 absRayDirection = abs(rayDirection);
	vec3 stepSize = abs(1.0 / rayDirection);
	ivec3 stepDirection = ivec3(sign(rayDirection));

	/*
	vec3 _d = (rayOriginInChunk - rayOrigin) / rayDirection;
	if(_d.x < _d.y)
	{
		if(_d.x < _d.z)
		{
			hitInfo.Normal = NormalYZ;
		}
		else
		{
			hitInfo.Normal = NormalXY;
		}
	}
	else
	{
		if(_d.y < _d.z)
		{
			hitInfo.Normal = NormalXZ;
		}
		else
		{
			hitInfo.Normal = NormalXY;
		}
	}
	*/

	hitInfo.Point.w = boxIntersectTest.x;
	while(hitInfo.Point.w < boxIntersectTest.y)
	{
		uint headIndex = u_drawData.z;
		uint parentIndex = u_drawData.z;
		uint childIndexInParent = 8;

		uint nodeHalfSize = CHUNK_SIZE / 2;
		ivec3 midPoint = ivec3(nodeHalfSize);
		while(nodeHalfSize > 0)
		{
			// Find which octet the ray is in
			ivec3 octet = ivec3(greaterThanEqual(rayOriginInChunk, midPoint));

			uint childIndex = octet.x | (octet.y << 1) | (octet.z << 2);
			uint childMask = 1 << childIndex;

			// Move the midpoint to the midpoint of the octet
			nodeHalfSize /= 2;
			midPoint += (octet * 2 - 1) * int(nodeHalfSize);

			if((GetByte(headIndex) & childMask) == 0)
			{
				vec3 d;
				if(nodeHalfSize == 0)
				{
					vec2 r = RayBoxIntersection(rayOriginInChunk, rayDirection, floor(rayOriginInChunk), ceil(rayOriginInChunk));
					hitInfo.Point.w += r.y;

					break;
				}
				else
				{
					ivec3 farCorner = midPoint + stepDirection * int(nodeHalfSize);
					vec3 distanceToFarCorner = abs(vec3(farCorner) - rayOriginInChunk) + 0.0001;
					d = distanceToFarCorner / absRayDirection;
				}

				// Move the ray to the closest edge
				if(d.x < d.y)
				{
					if(d.x < d.z)
					{
						rayOriginInChunk += rayDirection * d.x;
						hitInfo.Point.w += d.x;
						hitInfo.Normal = NormalYZ;
					}
					else
					{
						rayOriginInChunk += rayDirection * d.z;
						hitInfo.Point.w += d.z;
						hitInfo.Normal = NormalXY;
					}
				}
				else
				{
					if(d.y < d.z)
					{
						rayOriginInChunk += rayDirection * d.y;
						hitInfo.Point.w += d.y;
						hitInfo.Normal = NormalXZ;
					}
					else
					{
						rayOriginInChunk += rayDirection * d.z;
						hitInfo.Point.w += d.z;
						hitInfo.Normal = NormalXY;
					}
				}

				break;
			}

			uint skipCount =
				PopCountByte(GetByte(parentIndex), childIndexInParent + 1, 8) + // The number of children on the same layer after the current.
				PopCountRange(parentIndex + 1, headIndex) + // The number of nodes between the head and parent.
				PopCountByte(GetByte(headIndex), 0, childIndex) + // The number of children of head.
				1; // The head.

			childIndexInParent = childIndex;

			parentIndex = headIndex;
			headIndex += skipCount;
		}

		if(nodeHalfSize == 0)
		{
			hitInfo.Point.xyz = rayOrigin + hitInfo.Point.w * rayDirection;

			vec3 uv = fract(hitInfo.Point.xyz);
			switch(hitInfo.Normal)
			{
			case NormalYZ:
				hitInfo.UV = uv.zy;
				break;
			case NormalXZ:
				hitInfo.UV = uv.zx;
				break;
			case NormalXY:
				hitInfo.UV = uv.xy;
				break;
			}
			return true;
		}
	}

	return false;
}

bool RayVoxelIntersection(vec3 rayOrigin, vec3 rayDirection, float maxDistance, out RayHitInfo hitInfo)
{
	vec3 rayOriginInChunk = rayOrigin - vec3(u_drawData.x, 0, u_drawData.y) * CHUNK_SIZE;

	vec2 boxIntersectTest = RayBoxIntersection(rayOriginInChunk, rayDirection, vec3(0.0), vec3(CHUNK_SIZE));
	if(boxIntersectTest.x < 0.0 || boxIntersectTest.x > maxDistance)
	{
		return false;
	}
	rayOriginInChunk += (boxIntersectTest.x - 0.0001) * rayDirection;

	vec3 stepSize = abs(1.0 / rayDirection);

	ivec3 mapPosition = ivec3(floor(rayOriginInChunk));
	ivec3 stepDirection = ivec3(sign(rayDirection));

	vec3 rayLength = abs((mapPosition + max(stepDirection, vec3(0.0)) - rayOriginInChunk) * stepSize);

	hitInfo.Point.w = 0.0;
	while(hitInfo.Point.w < (boxIntersectTest.y - boxIntersectTest.x))
	{
		if(rayLength.x < rayLength.y)
		{
			if(rayLength.x < rayLength.z)
			{
				mapPosition.x += stepDirection.x;
				hitInfo.Point.w = rayLength.x;
				rayLength.x += stepSize.x;

				hitInfo.Normal = NormalYZ;
			}
			else
			{
				mapPosition.z += stepDirection.z;
				hitInfo.Point.w = rayLength.z;
				rayLength.z += stepSize.z;

				hitInfo.Normal = NormalXY;
			}
		}
		else
		{
			if(rayLength.y < rayLength.z)
			{
				mapPosition.y += stepDirection.y;
				hitInfo.Point.w = rayLength.y;
				rayLength.y += stepSize.y;

				hitInfo.Normal = NormalXZ;
			}
			else
			{
				mapPosition.z += stepDirection.z;
				hitInfo.Point.w = rayLength.z;
				rayLength.z += stepSize.z;

				hitInfo.Normal = NormalXY;
			}
		}

		// On Intel iGPU, reading u_drawData.w is unreasonably slow. I mean from 160 to 60 fps. On NVidia it works fine.
		if(GetVoxel(mapPosition, u_drawData.z, 0))
		{
			hitInfo.Point.w += boxIntersectTest.x;
			hitInfo.Point.xyz = rayOrigin + hitInfo.Point.w * rayDirection;
			switch(hitInfo.Normal)
			{
			case NormalYZ:
				hitInfo.UV = hitInfo.Point.zy - floor(hitInfo.Point.zy);
				break;
			case NormalXZ:
				hitInfo.UV = hitInfo.Point.zx - floor(hitInfo.Point.zx);
				break;
			case NormalXY:
				hitInfo.UV = hitInfo.Point.xy - floor(hitInfo.Point.xy);
				break;
			}
			return true;
		}
	}

	return false;
}

vec3 GetRayDirection(vec2 uv)
{
	uv = uv * 2.0 - 1.0;

	vec4 pointNDSH = vec4(uv, -1.0, 1.0);

	vec4 eyeDir = u_projectionProperties.ProjInv * pointNDSH;
	eyeDir.w = 0.0;

	vec3 worldDir = (u_projectionProperties.ViewInv * eyeDir).xyz;

	return normalize(worldDir);
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	const float depth = imageLoad(u_renderedImage, ivec2(gl_GlobalInvocationID.xy)).w;
	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(u_screenProperties.Size);
	const vec3 rayOrigin = u_projectionProperties.ViewInv[3].xyz;
	const vec3 rayDirection = GetRayDirection(uv);

	RayHitInfo hitInfo;
	if(RayOctreeTraversal(rayOrigin, rayDirection, depth, hitInfo))
	{
		// vec4 color = vec4(vec3(hitInfo.Point.w) / 200, hitInfo.Point.w);
		vec4 color = vec4(Shade(hitInfo), hitInfo.Point.w);

		imageStore(u_renderedImage, ivec2(gl_GlobalInvocationID.xy), color);
	}
}
