#version 460 core

layout(binding = 0, std140) uniform ProjectionProperties
{
	mat4 View;
	mat4 ViewInv;
	mat4 Proj;
	mat4 ProjInv;
} u_projectionProperties;

layout(binding = 1, std140) uniform ScreenProperties
{
	uvec2 Size;
} u_screenProperties;

layout(binding = 0, std430) buffer VoxelDataStorage
{
	uint VoxelData[];
};

layout(binding = 0, rgba16f) uniform image2D u_renderedImage;

// xy -> coordiante, z -> offset, w -> LOD
layout(location = 0) uniform uvec4 u_drawData = uvec4(0, 0, 0, 2);

#include "Octree.glsl"

struct RayHitInfo
{
	float Distance;
	vec3 Normal;
	vec3 Point;
};

// x -> Distance to the nearest intersection.
// y -> Distance to the furthest intersection.
vec2 RayBoxIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax)
{
	vec3 rayDirectionInverse = vec3(1.0) / rayDirection;

	vec2 tx = (vec2(boundsMin.x, boundsMax.x) - vec2(rayOrigin.x)) * rayDirectionInverse.x;
	vec2 ty = (vec2(boundsMin.y, boundsMax.y) - vec2(rayOrigin.y)) * rayDirectionInverse.y;
	vec2 tz = (vec2(boundsMin.z, boundsMax.z) - vec2(rayOrigin.z)) * rayDirectionInverse.z;

	float tmin = max(max(min(tx.x, tx.y), min(ty.x, ty.y)), min(tz.x, tz.y));
	float tmax = min(min(max(tx.x, tx.y), max(ty.x, ty.y)), max(tz.x, tz.y));

	// Box behind
	if(tmax < 0.0)
	{
		return vec2(-1.0);
	}

	// Doesnt't intersect
	if(tmin > tmax)
	{
		return vec2(-1.0);
	}

	// Ray inside box
	if(tmin < 0.0)
	{
		return vec2(0.0, tmax);
	}

	return vec2(tmin, tmax);
}

bool RayOctreeTraversal(vec3 rayOrigin, vec3 rayDirection, out RayHitInfo hitInfo)
{
	// Move the ray origin to the edge of the chunk
	vec2 boxIntersectTest = RayBoxIntersection(rayOrigin, rayDirection, vec3(0.0), vec3(CHUNK_SIZE));
	if(boxIntersectTest.x < 0.0)
	{
		return false;
	}
	rayOrigin += boxIntersectTest.x * rayDirection;

	vec3 absRayDirection = abs(rayDirection);
	vec3 stepSize = abs(1.0 / rayDirection);
	ivec3 stepDirection = ivec3(sign(rayDirection));

	float rayLength = 0.0;
	int i = 0;
	while(hitInfo.Distance < (boxIntersectTest.y - boxIntersectTest.x) && i < 50)
	{
		++i;

		uint headIndex = 0;
		uint parentIndex = 0;
		uint childIndexInParent = 8;

		uint nodeHalfSize = CHUNK_SIZE / 2;
		ivec3 midPoint = ivec3(nodeHalfSize);
		while(nodeHalfSize > 0)
		{
			// Find which octet the ray is in
			ivec3 octet = ivec3(greaterThanEqual(rayOrigin, midPoint));

			uint childIndex = octet.x | (octet.y << 1) | (octet.z << 2);
			uint childMask = 1 << childIndex;

			// Move the midpoint to the midpoint of the octet
			nodeHalfSize /= 2;
			midPoint += (octet * 2 - 1) * int(nodeHalfSize);

			if((GetByte(headIndex) & childMask) == 0)
			{
				vec3 farCorner = midPoint + stepDirection * nodeHalfSize;
				vec3 distanceToFarCorner = abs(farCorner - rayOrigin) + 0.00001;
				vec3 d = distanceToFarCorner / absRayDirection;

				// hitInfo.Distance = min(min(d.x, d.y), d.z);
				// hitInfo.Point = rayOrigin + rayDirection * hitInfo.Distance;
				// return true;

				// Move the ray to the closest edge
				if(d.x < d.y)
				{
					if(d.x < d.z)
					{
						rayOrigin += rayDirection * stepSize.x * distanceToFarCorner.x;
						hitInfo.Distance += d.x;
						hitInfo.Normal = vec3(-stepDirection.x, 0.0, 0.0);
					}
					else
					{
						rayOrigin += rayDirection * stepSize.z * distanceToFarCorner.z;
						hitInfo.Distance += d.z;
						hitInfo.Normal = vec3(0.0, 0.0, -stepDirection.z);
					}
				}
				else
				{
					if(d.y < d.z)
					{
						rayOrigin += rayDirection * stepSize.y * distanceToFarCorner.y;
						hitInfo.Distance += d.y;
						hitInfo.Normal = vec3(0.0, -stepDirection.y, 0.0);
					}
					else
					{
						rayOrigin += rayDirection * stepSize.z * distanceToFarCorner.z;
						hitInfo.Distance += d.z;
						hitInfo.Normal = vec3(0.0, 0.0, -stepDirection.z);
					}
				}

				break;
			}



			uint skipCount =
				PopCountByte(GetByte(parentIndex), childIndexInParent + 1, 8) + // The number of children on the same layer after the current.
				PopCountRange(parentIndex + 1, headIndex) + // The number of nodes between the head and parent.
				PopCountByte(GetByte(headIndex), 0, childIndex) + // The number of children of head.
				1; // The head.

			childIndexInParent = childIndex;

			parentIndex = headIndex;
			headIndex += skipCount;
		}

		if(nodeHalfSize == 0)
		{
			hitInfo.Point = rayOrigin;
			// hitInfo.Point = vec3(0.0);
			return true;
		}
	}

	return false;
}

bool RayVoxelIntersection(vec3 rayOrigin, vec3 rayDirection, float maxDistance, out RayHitInfo hitInfo)
{
	vec2 boxIntersectTest = RayBoxIntersection(rayOrigin, rayDirection, vec3(0.0), vec3(CHUNK_SIZE));
	if(boxIntersectTest.x < 0.0 || boxIntersectTest.x > maxDistance)
	{
		return false;
	}
	rayOrigin += (boxIntersectTest.x - 0.0001) * rayDirection;

	vec3 stepSize = abs(1.0 / rayDirection);

	ivec3 mapPosition = ivec3(floor(rayOrigin));
	ivec3 stepDirection = ivec3(sign(rayDirection));

	vec3 rayLength = abs((mapPosition + max(stepDirection, vec3(0.0)) - rayOrigin) * stepSize);

	hitInfo.Distance = 0.0;
	while(hitInfo.Distance < (boxIntersectTest.y - boxIntersectTest.x))
	{
		if(rayLength.x < rayLength.y)
		{
			if(rayLength.x < rayLength.z)
			{
				mapPosition.x += stepDirection.x;
				hitInfo.Distance = rayLength.x;
				rayLength.x += stepSize.x;

				hitInfo.Normal = vec3(-stepDirection.x, 0.0, 0.0);
			}
			else
			{
				mapPosition.z += stepDirection.z;
				hitInfo.Distance = rayLength.z;
				rayLength.z += stepSize.z;

				hitInfo.Normal = vec3(0.0, 0.0, -stepDirection.z);
			}
		}
		else
		{
			if(rayLength.y < rayLength.z)
			{
				mapPosition.y += stepDirection.y;
				hitInfo.Distance = rayLength.y;
				rayLength.y += stepSize.y;

				hitInfo.Normal = vec3(0.0, -stepDirection.y, 0.0);
			}
			else
			{
				mapPosition.z += stepDirection.z;
				hitInfo.Distance = rayLength.z;
				rayLength.z += stepSize.z;

				hitInfo.Normal = vec3(0.0, 0.0, -stepDirection.z);
			}
		}

		if(GetVoxel(mapPosition, u_drawData.z, u_drawData.w))
		{
			hitInfo.Point = rayOrigin + hitInfo.Distance * rayDirection;
			hitInfo.Distance += boxIntersectTest.x;
			return true;
		}
	}

	return false;
}

vec3 GetRayDirection(vec2 uv)
{
	uv = uv * 2.0 - 1.0;

	vec4 pointNDSH = vec4(uv, -1.0, 1.0);

	vec4 eyeDir = u_projectionProperties.ProjInv * pointNDSH;
	eyeDir.w = 0.0;

	vec3 worldDir = (u_projectionProperties.ViewInv * eyeDir).xyz;

	return normalize(worldDir);
}

const float AmbientLight = 0.05;
const float SunLight = 1.0;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	const float depth = imageLoad(u_renderedImage, ivec2(gl_GlobalInvocationID.xy)).w;
	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(u_screenProperties.Size);
	const vec3 rayOrigin = u_projectionProperties.ViewInv[3].xyz;
	const vec3 rayDirection = GetRayDirection(uv);

	vec4 color = vec4(vec3(0.0), depth);

	RayHitInfo hitInfo;
	if(RayVoxelIntersection(rayOrigin - vec3(u_drawData.x, 0, u_drawData.y) * CHUNK_SIZE, rayDirection, depth, hitInfo))
	{
		const vec3 lightDirection = normalize(hitInfo.Point - vec3(0.0, 32.0, 0.0));
		float lightStrength = dot(hitInfo.Normal, -lightDirection) * SunLight + AmbientLight;
		color = vec4(vec3(lightStrength), hitInfo.Distance);

		imageStore(u_renderedImage, ivec2(gl_GlobalInvocationID.xy), color);
	}
}
