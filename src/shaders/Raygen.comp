#version 460 core

layout(binding = 0, std140) uniform ProjectionProperties
{
	mat4 View;
	mat4 ViewInv;
	mat4 Proj;
	mat4 ProjInv;
} u_projectionProperties;

layout(binding = 1, std140) uniform ScreenProperties
{
	uvec2 Size;
} u_screenProperties;

layout(binding = 0, rgba32f) uniform image2D u_renderedImage;

vec3 GetRayDirection(vec2 uv)
{
	uv = uv * 2.0 - 1.0;

	vec4 pointNDSH = vec4(uv, -1.0, 1.0);

	vec4 eyeDir = u_projectionProperties.ProjInv * pointNDSH;
	eyeDir.w = 0.0;

	vec3 worldDir = (u_projectionProperties.ViewInv * eyeDir).xyz;

	return normalize(worldDir);
}

float RayBoxIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax)
{
	vec3 rayDirectionInverse = vec3(1.0) / rayDirection;

	vec2 tx = (vec2(boundsMin.x, boundsMax.x) - vec2(rayOrigin.x)) * rayDirectionInverse.x;
	vec2 ty = (vec2(boundsMin.y, boundsMax.y) - vec2(rayOrigin.y)) * rayDirectionInverse.y;
	vec2 tz = (vec2(boundsMin.z, boundsMax.z) - vec2(rayOrigin.z)) * rayDirectionInverse.z;

	float tmin = max(max(min(tx.x, tx.y), min(ty.x, ty.y)), min(tz.x, tz.y));
	float tmax = min(min(max(tx.x, tx.y), max(ty.x, ty.y)), max(tz.x, tz.y));

	if(tmax < 0.0)
	{
		return -1.0;
	}

	if(tmin > tmax)
	{
		return -1.0;
	}

	if(tmin < 0.0)
	{
		return tmax;
	}

	return tmin;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(u_screenProperties.Size);
	const vec3 rayOrigin = u_projectionProperties.ViewInv[3].xyz;
	const vec3 rayDirection = GetRayDirection(uv);

	vec3 color = vec3(0.0);

	float t = RayBoxIntersection(rayOrigin, rayDirection, vec3(-0.5, -1.5, -1.0), vec3(0.5, -0.5, 0.0));
	if(t >= 0.0)
	{
		color += exp(-t);
	}

	imageStore(u_renderedImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}
