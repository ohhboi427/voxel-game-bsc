#version 460 core

layout(binding = 0, std140) uniform ProjectionProperties
{
	mat4 View;
	mat4 ViewInv;
	mat4 Proj;
	mat4 ProjInv;
} u_projectionProperties;

layout(binding = 1, std140) uniform ScreenProperties
{
	uvec2 Size;
} u_screenProperties;

layout(binding = 0, rgba32f) uniform image2D u_renderedImage;

vec3 GetRayDirection(vec2 uv)
{
	uv = uv * 2.0 - 1.0;

	vec4 pointNDSH = vec4(uv, -1.0, 1.0);

	vec4 eyeDir = u_projectionProperties.ProjInv * pointNDSH;
	eyeDir.w = 0.0;

	vec3 worldDir = (u_projectionProperties.ViewInv * eyeDir).xyz;

	return normalize(worldDir);
}

// x -> Distance to the nearest intersection.
// y -> Distance to the furthest intersection.
vec2 RayBoxIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax)
{
	vec3 rayDirectionInverse = vec3(1.0) / rayDirection;

	vec2 tx = (vec2(boundsMin.x, boundsMax.x) - vec2(rayOrigin.x)) * rayDirectionInverse.x;
	vec2 ty = (vec2(boundsMin.y, boundsMax.y) - vec2(rayOrigin.y)) * rayDirectionInverse.y;
	vec2 tz = (vec2(boundsMin.z, boundsMax.z) - vec2(rayOrigin.z)) * rayDirectionInverse.z;

	float tmin = max(max(min(tx.x, tx.y), min(ty.x, ty.y)), min(tz.x, tz.y));
	float tmax = min(min(max(tx.x, tx.y), max(ty.x, ty.y)), max(tz.x, tz.y));

	// Box behind
	if(tmax < 0.0)
	{
		return vec2(-1.0);
	}

	// Doesnt't intersect
	if(tmin > tmax)
	{
		return vec2(-1.0);
	}

	// Ray inside box
	if(tmin < 0.0)
	{
		return vec2(0.0, tmax);
	}

	return vec2(tmin, tmax);
}

bool GetVoxel(ivec3 position)
{
	return position.y <= (-20 + (sin(position.x / 10.0) * cos(position.z / 20.0)) * 10.0);
}

float RayVoxelIntersection(vec3 rayOrigin, vec3 rayDirection, float maxDistance)
{
	vec3 stepSize = vec3(abs(1.0 / rayDirection.x), abs(1.0 / rayDirection.y), abs(1.0 / rayDirection.z));

	ivec3 mapPosition = ivec3(floor(rayOrigin));
	vec3 rayLength;
	ivec3 stepDirection;

	if(rayDirection.x < 0)
	{
		stepDirection.x = -1;
		rayLength.x = (rayOrigin.x - mapPosition.x) * stepSize.x;
	}
	else
	{
		stepDirection.x = 1;
		rayLength.x = ((mapPosition.x + 1) - rayOrigin.x) * stepSize.x;
	}
	if(rayDirection.y < 0)
	{
		stepDirection.y = -1;
		rayLength.y = (rayOrigin.y - mapPosition.y) * stepSize.y;
	}
	else
	{
		stepDirection.y = 1;
		rayLength.y = ((mapPosition.y + 1) - rayOrigin.y) * stepSize.y;
	}
	if(rayDirection.z < 0)
	{
		stepDirection.z = -1;
		rayLength.z = (rayOrigin.z - mapPosition.z) * stepSize.z;
	}
	else
	{
		stepDirection.z = 1;
		rayLength.z = ((mapPosition.z + 1) - rayOrigin.z) * stepSize.z;
	}

	float d = 0;
	while(d < maxDistance)
	{
		if(rayLength.x < rayLength.y)
		{
			if(rayLength.x < rayLength.z)
			{
				mapPosition.x += stepDirection.x;
				d = rayLength.x;
				rayLength.x += stepSize.x;
			}
			else
			{
				mapPosition.z += stepDirection.z;
				d = rayLength.z;
				rayLength.z += stepSize.z;
			}
		}
		else
		{
			if(rayLength.y < rayLength.z)
			{
				mapPosition.y += stepDirection.y;
				d = rayLength.y;
				rayLength.y += stepSize.y;
			}
			else
			{
				mapPosition.z += stepDirection.z;
				d = rayLength.z;
				rayLength.z += stepSize.z;
			}
		}

		if(GetVoxel(mapPosition))
		{
			return d;
		}
	}

	return -1.0;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(u_screenProperties.Size);
	const vec3 rayOrigin = u_projectionProperties.ViewInv[3].xyz;
	const vec3 rayDirection = GetRayDirection(uv);

	vec3 color = vec3(0.5, 0.8, 0.9);

	float t = RayVoxelIntersection(rayOrigin, rayDirection, 256.0);
	if(t >= 0.0)
	{
		color = vec3(t / 256.0);
	}

	imageStore(u_renderedImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}
